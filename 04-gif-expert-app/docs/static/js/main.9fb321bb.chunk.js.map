{"version":3,"sources":["reportWebVitals.js","components/atoms/AddCategory.js","helpers/getGifs.js","components/atoms/GifGridItem.js","components/molecules/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","textareaValue","setTextareaValue","onSubmit","submmitedValue","preventDefault","trim","length","oldTextareaValue","type","placeholder","value","onChange","inputTxt","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","allGifData","map","gifd","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEJC,mBAAS,IAFL,mBAEvCC,EAFuC,KAExBC,EAFwB,KAmB9C,OACE,sBAAMC,SAZc,SAACC,GAErBA,EAAeC,iBAEXJ,EAAcK,OAAOC,OAAS,IAChCR,GAAc,SAAAS,GAAgB,OAAGP,GAAH,mBAAqBO,OACnDN,EAAiB,MAMnB,SACE,uBACEO,KAAK,OACLC,YAAY,YACZC,MAAOV,EACPW,SArBuB,SAACC,GAC5BX,EAAiBW,EAASC,OAAOH,a,+BCPxBI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,8DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAaD,EAAKE,KAAI,SAAAC,GAAS,IAAD,EAClC,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZV,IAAG,UAAEQ,EAAKG,cAAP,aAAE,EAAaC,iBAAiBZ,QATlB,kBAYdM,GAZc,4CAAH,sDCSLO,EARK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC3B,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAEdhB,mBAAS,CACjCuB,KAAK,GACLa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAU,WACRxB,EAAQC,GACLxB,MAAK,SAAAgD,GACJF,EAAS,CACPf,KAAKiB,EACLJ,SAAS,SAId,CAACpB,IAEGqB,EDdwBI,CAAazB,GAAhCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAEpB,OACE,qCACE,oBAAIJ,UAAU,wCAAd,SAAuDhB,IAEtDoB,GAAW,mBAAGJ,UAAU,mCAAb,2BAEZ,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAACiB,GAAD,OACT,cAAC,EAAD,eAEMA,GADCA,EAAIf,aESRgB,EAxBa,WAAO,IAAD,EAEI3C,mBAAS,CAAC,SAFd,mBAEzB4C,EAFyB,KAEb7C,EAFa,KAMhC,OACE,qCACE,oBAAIiC,UAAU,aAAd,0BACA,uBACA,cAAC,EAAD,CAAajC,cAAeA,IAC5B,6BAEI6C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCbnB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1B3D,M","file":"static/js/main.9fb321bb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [textareaValue, setTextareaValue] = useState('');\n\n  const handleTextareaChange = (inputTxt) => {\n    setTextareaValue(inputTxt.target.value)\n  };\n\n  const handleSubmmit = (submmitedValue) => {\n\n    submmitedValue.preventDefault();\n\n    if (textareaValue.trim().length > 1) {\n      setCategories(oldTextareaValue=>[textareaValue, ...oldTextareaValue]);\n      setTextareaValue('');\n    }\n\n  };\n\n  return (\n    <form onSubmit={handleSubmmit}>\n      <input \n        type='text' \n        placeholder='Any idea?'\n        value={textareaValue} \n        onChange={handleTextareaChange}\n      />\n    </form>\n  )}\n\nAddCategory.propTypes = {setCategories: PropTypes.func.isRequired}\n","\nexport const getGifs = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=3&api_key=b8c7QxDu9Y0pzIJYkznZEl8H0h7e7KvY`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const allGifData = data.map(gifd => {\n    return {\n      id: gifd.id, \n      title: gifd.title, \n      url: gifd.images?.downsized_medium.url\n    }\n  });\n  return allGifData;\n}\n","import React from 'react';\n\nconst GifGridItem = ({title, url}) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )}\n\nexport default GifGridItem;\n","import React from 'react';\nimport {useFetchGifs} from '../../hooks/useFetchGifs';\nimport GifGridItem from '../atoms/GifGridItem';\n//import PropTypes from 'prop-types';\n\nexport const GifGrid = ({category}) => {\n\n  const {data:images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3> \n\n      {loading && <p className=\"animate__animated animate__flash\">L   o  a ding</p>}\n\n      <div className='card-grid'>\n        {\n          images.map((img) => (\n            <GifGridItem \n              key={img.id}\n              {...img}\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\n//GifGrid.propTypes = {\n//category: PropTypes.object.isRequired\n//}\n","import {useEffect, useState} from \"react\";\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data:[], \n    loading: true\n  })\n\n  useEffect(() => {\n    getGifs(category)\n      .then(imgs => {\n        setState({\n          data:imgs,\n          loading: false\n        })\n\n      });\n  }, [category])\n\n  return state; // {data:[], loading:true}\n\n};\n","import React, {useState} from 'react';\nimport {AddCategory} from './components/atoms/AddCategory';\nimport {GifGrid} from './components/molecules/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['Jake']);\n\n  //const handleAdd = () => {setCategories([...categories, 'Slime']);};\n\n  return (\n    <>\n      <h2 className='titletitle'>GifExpertApp</h2> \n      <hr/>\n      <AddCategory setCategories={setCategories}/>\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid \n              key={category}\n              category={category}\n            />\n          ))\n        }\n      </ol>\n    </>\n  )}\n\nexport default GifExpertApp ;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp/>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}