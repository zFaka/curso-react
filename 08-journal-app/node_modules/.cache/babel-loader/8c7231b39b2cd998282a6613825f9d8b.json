{"ast":null,"code":"import { types } from \"../types/types\";\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { uiFinishLoading, uiStartLoading } from \"./ui\";\nimport Swal from 'sweetalert2';\nexport const startLoginEmailPass = (email, password) => {\n  return dispatch => {\n    dispatch(uiStartLoading());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n      dispatch(uiFinishLoading());\n    }).catch(e => {\n      console.log(e);\n      dispatch(uiFinishLoading());\n      Swal.fire({\n        title: 'Error!',\n        text: 'Do you want to continue',\n        icon: 'error',\n        confirmButtonText: 'Cool'\n      });\n    });\n  };\n};\nexport const startRegEmailPassName = (name, email, password) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      console.log(user.displayName, user.uid);\n    });\n  };\n};\nexport const login = (uid, displayName) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName\n  }\n});\nexport const startLogout = () => {\n  return async dispatch => {\n    await firebase.auth().signOut();\n    dispatch(logout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["/home/f/Documents/curso-react/08-journal-app/src/actions/auth.js"],"names":["types","firebase","googleAuthProvider","uiFinishLoading","uiStartLoading","Swal","startLoginEmailPass","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","login","uid","displayName","catch","e","console","log","fire","title","text","icon","confirmButtonText","startRegEmailPassName","name","createUserWithEmailAndPassword","updateProfile","startGoogleLogin","signInWithPopup","type","payload","startLogout","signOut","logout"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gBAApB;AACA,SAAQC,QAAR,EAAkBC,kBAAlB,QAA2C,6BAA3C;AACA,SAAQC,eAAR,EAAyBC,cAAzB,QAA8C,MAA9C;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAIA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACL,cAAc,EAAf,CAAR;AACAH,IAAAA,QAAQ,CAACS,IAAT,GAAgBC,0BAAhB,CAA2CJ,KAA3C,EAAkDC,QAAlD,EACGI,IADH,CACQ,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAY;AAChBJ,MAAAA,QAAQ,CAACK,KAAK,CAACD,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACG,WAAhB,CAAN,CAAR;AACAP,MAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACD,KAJH,EAKGc,KALH,CAKSC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAT,MAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACAE,MAAAA,IAAI,CAACgB,IAAL,CAAU;AACRC,QAAAA,KAAK,EAAE,QADC;AAERC,QAAAA,IAAI,EAAE,yBAFE;AAGRC,QAAAA,IAAI,EAAE,OAHE;AAIRC,QAAAA,iBAAiB,EAAE;AAJX,OAAV;AAMD,KAdH;AAeD,GAjBD;AAkBD,CAnBM;AAuBP,OAAO,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAOpB,KAAP,EAAcC,QAAd,KAA4B;AAG/D,SAAQC,QAAD,IAAc;AAGnBR,IAAAA,QAAQ,CAACS,IAAT,GAAgBkB,8BAAhB,CAA+CrB,KAA/C,EAAsDC,QAAtD,EACGI,IADH,CACS,OAAO;AAACC,MAAAA;AAAD,KAAP,KAAkB;AAEvB,YAAMA,IAAI,CAACgB,aAAL,CAAmB;AAACb,QAAAA,WAAW,EAACW;AAAb,OAAnB,CAAN;AAEAlB,MAAAA,QAAQ,CACNK,KAAK,CAACD,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACG,WAAhB,CADC,CAAR;AAED,KAPH,EAQGC,KARH,CAQSC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KAVH;AAWD,GAdD;AAgBD,CAnBM;AAuBP,OAAO,MAAMY,gBAAgB,GAAG,MAAM;AACpC,SAAQrB,QAAD,IAAc;AAEnBR,IAAAA,QAAQ,CAACS,IAAT,GAAgBqB,eAAhB,CAAgC7B,kBAAhC,EACGU,IADH,CACQ,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAY;AAChBM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACG,WAAjB,EAA8BH,IAAI,CAACE,GAAnC;AACD,KAHH;AAID,GAND;AAQD,CATM;AAaP,OAAO,MAAMD,KAAK,GAAG,CAACC,GAAD,EAAMC,WAAN,MAAuB;AAE1CgB,EAAAA,IAAI,EAAChC,KAAK,CAACc,KAF+B;AAG1CmB,EAAAA,OAAO,EAAC;AAENlB,IAAAA,GAFM;AAGNC,IAAAA;AAHM;AAHkC,CAAvB,CAAd;AAYP,OAAO,MAAMkB,WAAW,GAAG,MAAM;AAE/B,SAAO,MAAMzB,QAAN,IAAmB;AACxB,UAAMR,QAAQ,CAACS,IAAT,GAAgByB,OAAhB,EAAN;AACA1B,IAAAA,QAAQ,CAAC2B,MAAM,EAAP,CAAR;AACD,GAHD;AAKD,CAPM;AAWP,OAAO,MAAMA,MAAM,GAAG,OAAO;AAC3BJ,EAAAA,IAAI,EAAChC,KAAK,CAACoC;AADgB,CAAP,CAAf","sourcesContent":["import {types} from \"../types/types\";\nimport {firebase, googleAuthProvider} from '../firebase/firebase-config';\nimport {uiFinishLoading, uiStartLoading} from \"./ui\";\nimport Swal from 'sweetalert2'\n\n\n\nexport const startLoginEmailPass = (email, password) => {\n  return (dispatch) => {\n    dispatch(uiStartLoading())\n    firebase.auth().signInWithEmailAndPassword(email, password)\n      .then(({user}) => {\n        dispatch(login(user.uid, user.displayName))\n        dispatch(uiFinishLoading())\n      })\n      .catch(e => {\n        console.log(e)\n        dispatch(uiFinishLoading())\n        Swal.fire({\n          title: 'Error!',\n          text: 'Do you want to continue',\n          icon: 'error',\n          confirmButtonText: 'Cool'\n        })\n      })\n  }\n}\n\n\n\nexport const startRegEmailPassName = (name, email, password ) => {\n\n\n  return (dispatch) => {\n\n\n    firebase.auth().createUserWithEmailAndPassword(email, password)\n      .then( async ({user}) => {\n\n        await user.updateProfile({displayName:name});\n\n        dispatch(\n          login(user.uid, user.displayName))\n      })\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n};\n\n\n\nexport const startGoogleLogin = () => {\n  return (dispatch) => {\n\n    firebase.auth().signInWithPopup(googleAuthProvider) \n      .then(({user}) => {\n        console.log(user.displayName, user.uid )\n      })\n  }\n\n};\n\n\n\nexport const login = (uid, displayName) => ({\n\n  type:types.login, \n  payload:{\n\n    uid, \n    displayName\n  }\n})\n\n\n\nexport const startLogout = () => {\n\n  return async(dispatch) => {\n    await firebase.auth().signOut()\n    dispatch(logout())\n  }\n\n}\n\n\n\nexport const logout = () => ({\n  type:types.logout\n});\n"]},"metadata":{},"sourceType":"module"}